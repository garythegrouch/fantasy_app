


Project Structure: 


directory_name/
	README.txt
	requirements.txt
	app_project/
		manage.py/
		app_project/
			__init__.py
			asgi.py
			settings.py
			urls.py
			wsgi.py
		fantasy_app/
			__init__.py
			admin.py
			apps.py
			migrations/
			models.py
			tests.py
			urls.py
			views.py



README.txt
	this text file listing the structure

requirements.txt
	list of libraries required
	"pip install -r requirements.txt"

app_project (outer)
	main directory containing project-wide settings, urls, etc. 

manage.py
	built-in Django thing for admin tasks

app_project (inner)
	directory for the actual Django app
	each app serves a particular purpose/has distinct feature of overall application

views.py
	file to define the view functions that handle HTTP requests and responses

urls.py
	file containing URL patterns and corresponding views

settings.py
	file storing the database settings

admin.py
	configuration for admin interface
	can manage app data through web interface as admin

migrations/
	holds onto migration files generated by Django migration system

tests.py
	unit tests for the app

models.py
	file to define models for app
	main entities we might have

	STUFF WE MIGHT WANT: 
	
	User 
		there is a built-in User model for user authentication and authorization
	
	CustomUser
		custom model separate from Django user model that contains additional info about user
		i.e. preferences, settings, etc.

	Team
		model contains info about team
		i.e. team name, owner (user), players in the team, formation, etc. 

	Player
		model contains info for each real-life player
		i.e. name, position, team, current form, price, statistics (goals scored, assists, minutes, clean sheets), etc.

	Match
		model contains info about real world matches
		i.e. teams playing in match, date/time, location, final score, goals scored by each team, cards, etc. 

	League
		model for the league a user is in 
		i.e. league name, commissioner, participants, scoring system, rules, standings, etc. 
		league rules - 	roster size and positions required, limit number of players per position (might get rid of later but keep this rule for now),
				rules for player acquisition (snake draft, waiver wire, trades), starting lineup rules, set schedule (duration of season), 
				tiebreakers (I think just keep it as draws for now), tiebreaks in standings (total pts scored, head-to-head, pts against), 
				

	Transfers 
		model for making changes to team
		i.e. player in/out, team involved, date/time of transfer, maybe this is where transfer rules go?, etc. 

	Scoring
		model for scoring system
		i.e. points for goals, assists, clean sheets, saves, cards, etc.

	Notifs
		model for notifications
		i.e. upcoming matches, transfer deadlines, message timestamp, message content, etc. 
		

	FOR EVERY MODEL WE NEED TO DECLARE THE RELATIONSHIPS/CONNECTIONS BETWEEN TWO MODELS

	
	MAIN RELATIONSHIP TYPES: 
	
	ForeignKey
		many-to-one relationship between models 
		-Player to Team
		-many players can belong to the same team, but each player belongs to single team
			(I think this is the structure for a draft league)

	OneToOne
		one-to-one relationship	between models
		-default Django User model to Custom User Model


	ManyToMany
		many-to-many relationship between models
		-Player to Team
		-a player can be on many teams and a team can have many players
			(I think this is the structure for classic fantasy league)
















	